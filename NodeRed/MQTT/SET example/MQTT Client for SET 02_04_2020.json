[{"id":"7fdfc2f.0fa413c","type":"tab","label":"MQTT Client for SET 02_04_2020","disabled":false,"info":""},{"id":"ada18937.329118","type":"mqtt in","z":"7fdfc2f.0fa413c","name":"Broker","topic":"F0B5D1A48F4E0000/STREAMING","qos":"0","datatype":"auto","broker":"5ab5d8b8.d82498","x":70,"y":500,"wires":[["844f2feb.ce922"]]},{"id":"8287f357.a1695","type":"function","z":"7fdfc2f.0fa413c","name":"parsing","func":"// Decalre variable for each object we need from the SET frame\nvar deviceType = {}\nvar dacType = {}\nvar time = {}\nvar samplingRate = {}\nvar channelsBitmap = {}\nvar frameId = {}\nvar numberDacPerChannel = {}\nvar previousNumberDacPerChannel = {}\nvar syncronizationStatus = {}\nvar alarmStatus = {}\nvar data = {}\ndata.topic = \"data\"\n\n// local variable\nvar i // for the for statement\nvar dataLen // for the total number of measurements\n\n/*******************************/\n/* Parsing the SET frame */\n/*******************************/\n// device type in 1 byte\ndeviceType.payload = msg.payload[0]\n\n// acquasition mode in 1 byte\ndacType.payload = msg.payload[1]\n\n// timestamp and milliseconds\n// The time in the SET mode frame in 6 bytes.\n// 4 bytes for the Reference time in Unix format)\n// 2 byte for the Reference millisecond\ntime.payload = {}\nfor(i=0; i<6; i++){\n    time.payload[i] = msg.payload[2+i]\n}\n// The sampling rate in 2 bytes\nsamplingRate.payload = {}\nfor(i=0; i<2; i++){\n    samplingRate.payload[i] = msg.payload[8+i]\n}\n// The channels bitmap is in 4 bytes\nchannelsBitmap.payload = {}\nfor(i=0; i<4; i++){\n    channelsBitmap.payload[i] = msg.payload[10+i]\n}\n// The frame Id in 3 byte\nframeId.payload = {}\nfor(i=0; i<3; i++){\n    frameId.payload[i] = msg.payload[14+i]\n}\n// The current number of samples per channel in 2 bytes\nnumberDacPerChannel.payload = {}\nfor(i=0; i<2; i++){\n    numberDacPerChannel.payload[i] = msg.payload[17+i]\n}\n// The previous number of samples per channel in 2 bytes\npreviousNumberDacPerChannel.payload = {}\nfor(i=0; i<2; i++){\n    previousNumberDacPerChannel.payload[i] = msg.payload[25+i]\n}\n\n// the syncronization status\nsyncronizationStatus.payload = msg.payload[27]\n\n// the Alarm status (we will not use it because it has no information, always 0)\nalarmStatus.payload = msg.payload[29] \n       \n// The data (or measurements) is the rest of the payload\n// frame length - the header length (fixed objects) or multiply the number of samples by the number of active channels\ndataLen = msg.payload.length - 30\ndata.payload = []\nfor(i=0; i<dataLen; i++){\n    data.payload[i] = msg.payload[30+i]\n}\n\n/***********************************/\n/* return all field in array object*/\n/***********************************/\nreturn [deviceType, dacType, syncronizationStatus, channelsBitmap, data, numberDacPerChannel, previousNumberDacPerChannel, frameId, time, samplingRate, alarmStatus]","outputs":11,"noerr":0,"x":480,"y":500,"wires":[["40d946e0.bd7cc8"],["d37a0222.76332"],["32558d7f.dc5eb2"],["ec3ff6ff.4db7c8"],["2d372b00.030b16"],["e5e017f4.1d8828"],["4fd9a5e3.2473bc"],["44e267dc.899868"],["dabce9cc.174828"],["5b03cbeb.e80754"],[]]},{"id":"40d946e0.bd7cc8","type":"function","z":"7fdfc2f.0fa413c","name":"get_deviceType","func":"var deviceType = {}\ndeviceType.topic = \"deviceType\"\nswitch(msg.payload){\n    case 0x01:\n        deviceType.payload = \"AX 3D\"\n        break;\n    case 0x02:\n        deviceType.payload = \"HI- INC MONO\"\n        break;\n    case 0x03:\n        deviceType.payload = \"HI- INC BI\"\n        break;\n    case 0x04:\n        deviceType.payload = \"X- INC MONO\"\n        break\n    case 0x05:\n        deviceType.payload = \"X- INC BI\"\n        break;\n    case 0x06:\n        deviceType.payload = \"AX 3DS\"\n        break;\n    default:\n        deviceType.payload = \"Unknow\"\n        break;\n        \n}\nreturn deviceType;","outputs":1,"noerr":0,"x":760,"y":280,"wires":[["afc45210.7cb56"]],"info":"This function get as input the device type code which is a hex value to decode it and return the device type in a readable format."},{"id":"d37a0222.76332","type":"function","z":"7fdfc2f.0fa413c","name":"get_dacMode","func":"var dacMode = {}\ndacMode.topic = \"dacMode\"\nswitch(msg.payload){\n    case 0x01:\n        dacMode.payload = \"LowDutyCycle\"\n        break;\n    case 0x02:\n        dacMode.payload = \"Alarm\"\n        break;\n    case 0x03:\n        dacMode.payload = \"Streaming\"\n        break;\n    case 0x04:\n        dacMode.payload = \"Shock Detection\"\n        break\n    case 0x05:\n        dacMode.payload = \"Ldc Math Result\"\n        break;\n    case 0x06:\n        dacMode.payload = \"S.E.T\"\n        break;\n    case 0x07:\n        dacMode.payload = \"Dynamic math result\"\n        break;\n    default:\n        dacMode.payload = \"Unknow\"\n        break;\n        \n}\nreturn dacMode;","outputs":1,"noerr":0,"x":760,"y":340,"wires":[["afc45210.7cb56"]],"info":"This function get as input the dac mode code which is a hex value to decode it and return the dac mode in a readable format."},{"id":"ec3ff6ff.4db7c8","type":"function","z":"7fdfc2f.0fa413c","name":"get_channels","func":"/*\nthe channel bitmap is 4 bytes.\neach bit represent one channel status:\n    0 mean that channel is disable,\n    1 mean that channel enabel\nand from the bit index we can get the channel name\n*/\n\nvar channelsList=[]\nvar indexPos = 0;\nvar bitPos = 1\nvar i;\nfor(i=0; i<4; i++){\n    bitPos = 1\n    while(bitPos<=0x10){\n        if(msg.payload[i]&bitPos){\n            if(indexPos==0x00)\n                channelsList.push(\"Ch_Z\")\n            else if(indexPos==0x01)\n                channelsList.push(\"Ch_X\")\n            else if(indexPos==0x02)\n                channelsList.push(\"Ch_Y\")\n            else if(indexPos==0x03)\n                channelsList.push(\"Inc_X\")\n            else if(indexPos==0x04)\n                channelsList.push(\"Inc_Y\")\n        }\n        bitPos<<=1\n        indexPos+=1\n    }\n}\nmsg.payload = channelsList\nmsg.topic = \"channelsList\"\nreturn msg;","outputs":1,"noerr":0,"x":750,"y":460,"wires":[["2d372b00.030b16","afebbf3f.a4294"]]},{"id":"dabce9cc.174828","type":"function","z":"7fdfc2f.0fa413c","name":"get-timestampAndMs","func":"var time_timeStamp = {}\ntime_timeStamp.topic = \"time_timeStamp\"\nvar time_ms = {}\ntime_ms.topic = \"time_ms\"\n\n// timestamp\ntime_timeStamp.payload = 0x00000000\ntime_timeStamp.payload |= msg.payload[0]\ntime_timeStamp.payload |= msg.payload[1]<<8\ntime_timeStamp.payload |= msg.payload[2]<<16\ntime_timeStamp.payload |= msg.payload[3]<<24\n// milliseconds\ntime_ms.payload = 0x0000\ntime_ms.payload |= msg.payload[4]\ntime_ms.payload |= msg.payload[5]<<8\n\nreturn [time_timeStamp, time_ms];","outputs":2,"noerr":0,"x":780,"y":780,"wires":[["ea407ee7.8915d"],["ea407ee7.8915d"]]},{"id":"434570ec.49a3e","type":"function","z":"7fdfc2f.0fa413c","name":"get_dateTimeArray","func":"// input\nvar time_timeStamp = msg.payload.time_timeStamp\nvar time_ms = msg.payload.time_ms\nvar samplingRate = msg.payload.samplingRate\nvar frameId = msg.payload.frameId\nvar currentNbrDataPerChannel = msg.payload.currentNbrDataPerChannel\nvar previouseNbrDataPerChannel = msg.payload.previouseNbrDataPerChannel\n// output\nvar dataTimeArray = {}\ndataTimeArray.topic = \"dataTimeArray\"\n\ndataTimeArray.payload = []\nvar subPacketRow = 0\nfor(subPacketRow=0; subPacketRow<currentNbrDataPerChannel;subPacketRow++){\n    var subPacketIndex = (frameId * previouseNbrDataPerChannel) + subPacketRow\n    dataTimeArray.payload.push(time_timeStamp+time_ms/1000+((1/samplingRate)*subPacketIndex))\n}\nreturn dataTimeArray;","outputs":1,"noerr":0,"x":1330,"y":720,"wires":[["afebbf3f.a4294"]]},{"id":"ea407ee7.8915d","type":"join","z":"7fdfc2f.0fa413c","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"6","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1150,"y":720,"wires":[["434570ec.49a3e"]]},{"id":"44e267dc.899868","type":"function","z":"7fdfc2f.0fa413c","name":"get_frameId","func":"//frame id in 3 bytes\nvar frameId = {}\nframeId.topic = \"frameId\"\n\nframeId.payload = 0x000000\nframeId.payload |= msg.payload[0]\nframeId.payload |= msg.payload[1]<<8\nframeId.payload |= msg.payload[2]<<16\n\nreturn frameId;","outputs":1,"noerr":0,"x":750,"y":720,"wires":[["ea407ee7.8915d","f6a079bc.4da378"]]},{"id":"5b03cbeb.e80754","type":"function","z":"7fdfc2f.0fa413c","name":"get_samplingRate","func":"//sampling rate in 2 bytes\nvar samplingRate = {}\nsamplingRate.topic = \"samplingRate\"\n\nsamplingRate.payload = 0x000000\nsamplingRate.payload |= msg.payload[0]\nsamplingRate.payload |= msg.payload[1]<<8\n\nreturn samplingRate;","outputs":1,"noerr":0,"x":770,"y":840,"wires":[["ea407ee7.8915d"]]},{"id":"e5e017f4.1d8828","type":"function","z":"7fdfc2f.0fa413c","name":"get_currentNbrDataPerChannel","func":"//current number of data per channel in 2 bytes\nvar currentNbrDataPerChannel = {}\ncurrentNbrDataPerChannel.topic = \"currentNbrDataPerChannel\"\n\ncurrentNbrDataPerChannel.payload = 0x000000\ncurrentNbrDataPerChannel.payload |= msg.payload[0]\ncurrentNbrDataPerChannel.payload |= msg.payload[1]<<8\n\nreturn currentNbrDataPerChannel;","outputs":1,"noerr":0,"x":810,"y":540,"wires":[["ea407ee7.8915d","2d372b00.030b16"]]},{"id":"4fd9a5e3.2473bc","type":"function","z":"7fdfc2f.0fa413c","name":"get_previouseNbrDataPerChannel","func":"//previouse number of data per channel in 2 bytes\nvar previouseNbrDataPerChannel = {}\npreviouseNbrDataPerChannel.topic = \"previouseNbrDataPerChannel\"\n\npreviouseNbrDataPerChannel.payload = 0x000000\npreviouseNbrDataPerChannel.payload |= msg.payload[0]\npreviouseNbrDataPerChannel.payload |= msg.payload[1]<<8\n\nreturn previouseNbrDataPerChannel;","outputs":1,"noerr":0,"x":820,"y":600,"wires":[["ea407ee7.8915d"]]},{"id":"1d76876f.814a59","type":"function","z":"7fdfc2f.0fa413c","name":"get_dataArray","func":"// input\nvar data = msg.payload.data\nvar currentNbrDataPerChannel = msg.payload.currentNbrDataPerChannel\nvar nbrChannels = (msg.payload.channelsList).length\n// output\nvar dataArray = {}\ndataArray.topic = \"dataArray\"\n/* out put struction */\n/*\n+-----------+-----------------------------------+\n|           | +-------+--------+-----+--------+ |\n| channel 0 | |data 0 | data 1 | ... | data n | |\n|           | +-------+--------+-----+--------+ |\n+-----------+-----------------------------------+\n+-----------+-----------------------------------+\n|           | +-------+--------+-----+--------+ |\n| channel 1 | |data 0 | data 1 | ... | data n | |\n|           | +-------+--------+-----+--------+ |\n+-----------+-----------------------------------+\n.\n.\n.\n+-----------+-----------------------------------+\n|           | +-------+--------+-----+--------+ |\n| channel m | |data 0 | data 1 | ... | data n | |\n|           | +-------+--------+-----+--------+ |\n+-----------+-----------------------------------+\n\n2 dimensional array\nfirst dimension for channels\nsecond dimension for data of each channel\n\n*/\n// indexs\nvar i=0 // for the number of channels\nvar j=0 // for the current number of data per channel\nvar pos=0 // to keep track of the index of data\n\ndataArray.payload = new Array(nbrChannels)\nfor(i=0; i<nbrChannels; i++){\n    dataArray.payload[i] = new Array(currentNbrDataPerChannel)\n    for(j=0; j<currentNbrDataPerChannel; j++){\n        pos = i*3+j*nbrChannels*3\n        // sample in 3 bytes (signed and LSB)\n        dataArray.payload[i][j] = 0x000000\n        dataArray.payload[i][j] |= data[pos]\n        dataArray.payload[i][j] |= (data[pos+1]<<8) \n        dataArray.payload[i][j] |= (data[pos+2]&0x7f<<16)\n        dataArray.payload[i][j] = dataArray.payload[i][j]/1000\n        //if sign bit equal 1 the measurement is negative\n        if((data[pos+2]&0x80)==0x80){\n            dataArray.payload[i][j] *= -1\n        }\n    }\n}\n\nreturn dataArray;","outputs":1,"noerr":0,"x":1320,"y":500,"wires":[["afebbf3f.a4294"]]},{"id":"2d372b00.030b16","type":"join","z":"7fdfc2f.0fa413c","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"3","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1150,"y":500,"wires":[["1d76876f.814a59"]]},{"id":"afebbf3f.a4294","type":"join","z":"7fdfc2f.0fa413c","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"3","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1530,"y":460,"wires":[["cd2b0952.562708","596a3240.830e7c"]]},{"id":"a4576aab.eab278","type":"ui_chart","z":"7fdfc2f.0fa413c","name":"Accelerometer","group":"b2661d4d.1e592","order":2,"width":12,"height":6,"label":"Accelerometer (g)","chartType":"line","legend":"true","xformat":"HH:mm:ss SSS DD/MM/YYYY","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":"20","removeOlderPoints":"5000","removeOlderUnit":"1","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":1,"x":1980,"y":460,"wires":[[]]},{"id":"9587b053.75c2c","type":"ui_text","z":"7fdfc2f.0fa413c","group":"b2661d4d.1e592","order":1,"width":0,"height":0,"name":"","label":"","format":"{{msg.payload.deviceType}} \"{{msg.payload.dacMode}}\"  ({{msg.payload.synchronizationStatus}})","layout":"col-center","x":1950,"y":340,"wires":[]},{"id":"32558d7f.dc5eb2","type":"function","z":"7fdfc2f.0fa413c","name":"get_synchronizationStatus","func":"var synchronizationStatus = {}\nsynchronizationStatus.topic = \"synchronizationStatus\"\n// synchronization status is the first bit\nif(msg.payload&0x01 == 1){\n    synchronizationStatus.payload = \"synchronized\"\n}\nelse{\n    synchronizationStatus.payload = \"not synchronized\"\n}\nreturn synchronizationStatus;","outputs":1,"noerr":0,"x":800,"y":400,"wires":[["afc45210.7cb56"]],"info":"This function get as input the device type code which is a hex value to decode it and return the device type in a readable format."},{"id":"afc45210.7cb56","type":"join","z":"7fdfc2f.0fa413c","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"3","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1150,"y":340,"wires":[["9587b053.75c2c"]]},{"id":"87461e36.27d95","type":"ui_chart","z":"7fdfc2f.0fa413c","name":"Inclinometer ","group":"b2661d4d.1e592","order":4,"width":12,"height":6,"label":"Inclinometer (deg)","chartType":"line","legend":"true","xformat":"HH:mm:ss SSS DD/MM/YYYY","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":"20","removeOlderPoints":"5000","removeOlderUnit":"1","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":1,"x":1970,"y":540,"wires":[[]]},{"id":"f6a079bc.4da378","type":"function","z":"7fdfc2f.0fa413c","name":"reset graph","func":"/* input */\nvar frameId = msg.payload\n// list of global variable name of old measurements of each sensor type (tilt, inclinometer)\nvar listOfBuffer = [\n    \"oldTiltMeasurements\",\n    \"oldInclMeasurements\"]\n\n// if frameId = to 0, it means it's a new streaming, so clear the graph by clearing old measurement\nif(frameId==0){\n    for(var i=0; i<listOfBuffer.length; i++){\n        flow.set(listOfBuffer[i], [])\n    }\n}","outputs":0,"noerr":0,"x":890,"y":660,"wires":[]},{"id":"844f2feb.ce922","type":"function","z":"7fdfc2f.0fa413c","name":"MQTT frame verification","func":"/*\nBecause the STREAMING topic is not reserved only for SET mode data\n(shared with dynamic math result, SET and Shock detection),\nwe need to filter the message payload come from the BeanDevice \nand select only the frame with acquasition mode equal to 0x03 \nwhich is the code for the SET mode.\n(Note: all frames comes from any acquisition mode start with:\n    device type (first byte),\n    acquasition mode (second byte),\n    the rest of the frame it depends on the dac mode)\n*/\n\n// verify if it's a SET frame\nif(msg.payload[1]!=0x06){\n    // by returning nothing, the next node will receive nothing which mean it will not start\n    return;\n}\nreturn msg;","outputs":1,"noerr":0,"x":270,"y":500,"wires":[["8287f357.a1695"]]},{"id":"905c5bc5.d60d28","type":"comment","z":"7fdfc2f.0fa413c","name":"Read me","info":"Company: BeanAir\nDate:   02/04/2020\nAuthor: Habib jomaa\nDescription:\nThis Example uses MQTT protocol to collect data measurments from a BeanDevice in SET mode and display it in graph. \nThe beandevice used is \"X-Inc\" with 5 channels active and the broker is \"broker.hivemq.com\", so make sure to:\n    + set your machine's timezone to UTC to get the correct time sent from BeanDevice (because the Dashboard package automaticly convert time to the time zone in host machine)\n    + set your configuration right before running the example.\n    + connect this flow and the BeanDevice to the same broker.\n    (you can change the the accelerometer and inclinometer chart nodes and dashboard in the way you like, and to set the maxsize of the stored data you need to change the varaible \"graphMaxSize\" in node \"to accelerometer dashboard\" and \"to inclinometer dashboard\")\n\n(Note: \n    + Data sample in 3 bytes, the last bit is a sign bit and all field are LSB first\n    + Time is in 6 bytes, 4 fr the reference time in unix format and the last 2 bytes for milliseconds)\n\nRelated document:\n    + TN-RF-19-BeanDevice-Wilow-IoT-starter-Guidelines-using-MQTT-protocol-with-NodeRed.pdf (see www.wireless-iot.beanair.com support section)\n\nReference docuement: \n    + http://www.wireless-iot.beanair.com/files/TN-RF-004-MQTT-Comnmunication-Protocol.pdf\n    \nPreparation:\n1- Configure the beandevice to use the MQTT mode\n2- Make sure to enable the topic for dynamic measurement\n3- Start running the beandevice in SET mode\n\nSteps of this flow:\n1- connect to the broker\n2- subscribe to the topic \"STREAMING\" which is the topic for the dynamic measurement\n3- wait for payloads\n4- check DAC type if it's SET\n5- parse the coming payload\n6- check if it's a new streaming (frame id = 0),if it is then clear the graph.\n6- display data in graph","x":80,"y":420,"wires":[]},{"id":"cd2b0952.562708","type":"function","z":"7fdfc2f.0fa413c","name":"to accelerometer dashboard","func":"/* input */\nvar channels = msg.payload.channelsList\nvar data = msg.payload.dataArray\nvar timestamp = msg.payload.dataTimeArray\n/* configuration */\n// use a commun sub_word of the channel name as filter\n// \"ch\" because Accelerometer sensors's name start with ch\nvar filter = \"ch\"\n// the variable label of the old measurement in the context\nvar oldMeasurementBuffer_variableName = \"oldAccelerometerMeasurements\"\n// maximum number to get from the old measurement\nvar graphMaxSize = 2000\n/* saved data */\nvar oldMeasurements = flow.get(oldMeasurementBuffer_variableName)\n/* output */\nvar dashboardData = {}\ndashboardData.payload = []\n\n// use object to hold the json data to send to graph\ndataObject = {}\n\n// graph labels. (no need to use any label)\ndataObject.labels=[]\n\n// graph series (fill it later)\ndataObject.series = []\n\n// graph data (measurement)\ndataObject.data = []\nvar newMeasurments = true\n//   check if there old data stored before\nif (typeof oldMeasurements == \"object\"){\n    if(oldMeasurements.hasOwnProperty(\"data\")){\n        newMeasurments = false\n    }\n}\n// old measurement memory contains only the data from filtered channel, so its length will be less then the channels and data from input\n// this is why we need double iterators, i for the stored data and it will increase each time a channel pass the filter and index is for the upcoming data\nvar i = 0\nfor(var index in channels){\n    // get channel by filter\n    if(channels[index].toLowerCase().includes(filter)){\n        // add channel name to list of series\n        dataObject.series.push(channels[index])\n        // add measurement to the data list\n        var dataBuffer = []\n        // if it's not a new stream, get the last [graphMaxSize] measurements\n        if(newMeasurments === false){\n            var stop=oldMeasurements.data[i].length\n            var start=0\n            if(stop>graphMaxSize){\n                start = stop-graphMaxSize\n            }\n            for(; start<stop; start++){\n                dataBuffer.push(oldMeasurements.data[i][start])\n            }\n        }\n        // add the new measurements with the corresponding time\n        for(var j in timestamp){\n            var element = {}\n            element.y = data[index][j]\n            element.x = Math.trunc(timestamp[j]*1000)\n            dataBuffer.push(element)\n        }\n        dataObject.data.push(dataBuffer)\n        i++\n    }\n}\ndashboardData.payload.push(dataObject)\n//save measurements\nflow.set(oldMeasurementBuffer_variableName, dataObject)\nreturn dashboardData;","outputs":1,"noerr":0,"x":1740,"y":460,"wires":[["a4576aab.eab278"]]},{"id":"596a3240.830e7c","type":"function","z":"7fdfc2f.0fa413c","name":"to inclinometer dashboard","func":"/* input */\nvar channels = msg.payload.channelsList\nvar data = msg.payload.dataArray\nvar timestamp = msg.payload.dataTimeArray\n/* configuration */\n// use a commun sub_word of the channel name as filter\n// \"inc\" because inclinometer sensors's name start with inc\nvar filter = \"inc\"\n// the variable label of the old measurement in the context\nvar oldMeasurementBuffer_variableName = \"oldInclMeasurements\"\n// maximum number to get from the old measurement\nvar graphMaxSize = 2000\n/* saved data */\nvar oldMeasurements = flow.get(oldMeasurementBuffer_variableName)\n/* output */\nvar dashboardData = {}\ndashboardData.payload = []\n\n// use object to hold the json data to send to graph\ndataObject = {}\n\n// graph labels. (no need to use any label)\ndataObject.labels=[]\n\n// graph series (fill it later)\ndataObject.series = []\n\n// graph data (measurement)\ndataObject.data = []\nvar newMeasurments = true\n//   check if there old data stored before\nif (typeof oldMeasurements == \"object\"){\n    if(oldMeasurements.hasOwnProperty(\"data\")){\n        newMeasurments = false\n    }\n}\n// old measurement memory contains only the data from filtered channel, so its length will be less then the channels and data from input\n// this is why we need double iterators, i for the stored data and it will increase each time a channel pass the filter and index is for the upcoming data\nvar i = 0\nfor(var index in channels){\n    // get channel by filter\n    if(channels[index].toLowerCase().includes(filter)){\n        // add channel name to list of series\n        dataObject.series.push(channels[index])\n        // add measurement to the data list\n        var dataBuffer = []\n        // if it's not a new stream, get the last [graphMaxSize] measurements\n        if(newMeasurments === false){\n            var stop=oldMeasurements.data[i].length\n            var start=0\n            if(stop>graphMaxSize){\n                start = stop-graphMaxSize\n            }\n            for(; start<stop; start++){\n                dataBuffer.push(oldMeasurements.data[i][start])\n            }\n        }\n        // add the new measurements with the corresponding time\n        for(var j in timestamp){\n            var element = {}\n            element.y = data[index][j]\n            element.x = Math.trunc(timestamp[j]*1000)\n            dataBuffer.push(element)\n        }\n        dataObject.data.push(dataBuffer)\n        i++\n    }\n}\ndashboardData.payload.push(dataObject)\n//save measurements\nflow.set(oldMeasurementBuffer_variableName, dataObject)\nreturn dashboardData;","outputs":1,"noerr":0,"x":1750,"y":540,"wires":[["87461e36.27d95"]]},{"id":"5ab5d8b8.d82498","type":"mqtt-broker","z":"","name":"hivemq broker","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"b2661d4d.1e592","type":"ui_group","z":"7fdfc2f.0fa413c","name":"MQTT SET","tab":"84b79662.d3a428","order":1,"disp":true,"width":"25","collapse":false},{"id":"84b79662.d3a428","type":"ui_tab","z":"7fdfc2f.0fa413c","name":"BeanAir: SET","icon":"dashboard","order":6,"disabled":false,"hidden":false}]